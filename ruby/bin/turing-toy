#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)

require 'turing_toy'
require 'turing_toy/turing_machine'

require 'optparse'

options = {depth: 0, cycle: 0, rules: false}
OptionParser.new do |opts|
  opts.banner = "Usage: turing-toy machine input [options]"

  opts.on("-d DEPTH", "--depth DEPTH", "How deeply to unwrap the machine output") do |d|
    options[:depth] = d.to_i
  end
  opts.on("-c CYCLE", "--cycle CYCLE", "Which cycle to display output on (must be >= depth)") do |c|
    options[:cycle] = c.to_i
  end
  opts.on("-r", "--rules", "Print rules and exit") do |r|
    options[:rules] = true
  end
end.parse!

toy = ARGV[0]
input = ARGV[1]

config = TuringToy.const_get(toy)

if options.fetch(:rules)
  config.rules.each do |state, subrules|
    subrules.each do |h, action|
      puts "%s: %s => %s %s %s" % [
        state,
        h,
        action[0],
        action[1] < 0 ? "L" : "R",
        action[2],
      ]
    end
  end
  exit
end

machine = TuringToy::TuringMachine.new(config: config, input: input)

def format(machine)
  tape, head, state = machine.tape, machine.head, machine.state

  lhs = head > 0 ? tape[0..machine.head-1] : []
  mhs = tape[head]
  rhs = tape[head+1..-1]

  buffer = StringIO.new("")
  buffer.print state.to_s + ": "
  buffer.print head == 0 ? "" : " "
  buffer.print lhs.join(" ")
  buffer.print "[%s]" % mhs
  buffer.print rhs.join(" ")
  buffer.string
end

n = 0
depth = options.fetch(:depth)
cycle = options.fetch(:cycle)
loop do
  formatted = config.format2(machine.tape, machine.head, machine.state)
  if formatted[cycle] && formatted[depth]
    puts formatted[depth]
  end
  break unless machine.step
  n += 1
end
